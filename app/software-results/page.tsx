"use client"

import { useSearchParams } from "next/navigation"
import { useEffect, useState } from "react"
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { ArrowLeft, CheckCircle, AlertTriangle, XCircle, Download } from "lucide-react"

interface AssessmentData {
  softwareName: string
  requestingTeam: string
  businessNeed: string
  currentSolution: string
  urgency: string
  budget: string
  users: string
  alternatives: string[]
  riskTolerance: string
  implementation: string
}

export default function SoftwareResults() {
  const searchParams = useSearchParams()
  const [data, setData] = useState<AssessmentData | null>(null)
  const [score, setScore] = useState(0)
  const [recommendation, setRecommendation] = useState("")

  useEffect(() => {
    const dataParam = searchParams.get("data")
    if (dataParam) {
      try {
        const parsedData = JSON.parse(decodeURIComponent(dataParam))
        setData(parsedData)

        // Calculate score based on assessment
        let calculatedScore = 0

        // Urgency scoring
        if (parsedData.urgency === "critical") calculatedScore += 25
        else if (parsedData.urgency === "high") calculatedScore += 20
        else if (parsedData.urgency === "medium") calculatedScore += 10
        else calculatedScore += 5

        // Alternatives consideration
        calculatedScore += parsedData.alternatives.length * 5

        // Budget reasonableness
        if (parsedData.budget === "under-1k") calculatedScore += 15
        else if (parsedData.budget === "1k-5k") calculatedScore += 10
        else if (parsedData.budget === "5k-25k") calculatedScore += 5

        // Business need clarity
        if (parsedData.businessNeed.length > 100) calculatedScore += 15
        else if (parsedData.businessNeed.length > 50) calculatedScore += 10
        else calculatedScore += 5

        // Implementation planning
        if (parsedData.implementation.length > 50) calculatedScore += 10

        setScore(Math.min(calculatedScore, 100))

        // Generate recommendation
        if (calculatedScore >= 70) {
          setRecommendation("PROCEED")
        } else if (calculatedScore >= 50) {
          setRecommendation("PROCEED WITH CAUTION")
        } else {
          setRecommendation("RECONSIDER")
        }
      } catch (error) {
        console.error("Error parsing data:", error)
      }
    }
  }, [searchParams])

  const getScoreColor = (score: number) => {
    if (score >= 70) return "text-green-600"
    if (score >= 50) return "text-yellow-600"
    return "text-red-600"
  }

  const getRecommendationIcon = (rec: string) => {
    if (rec === "PROCEED") return <CheckCircle className="h-5 w-5 text-green-600" />
    if (rec === "PROCEED WITH CAUTION") return <AlertTriangle className="h-5 w-5 text-yellow-600" />
    return <XCircle className="h-5 w-5 text-red-600" />
  }

  const generateReport = () => {
    if (!data) return

    const report = `
DENTONS SOFTWARE PURCHASE ASSESSMENT REPORT
==========================================

Software: ${data.softwareName}
Requesting Team: ${data.requestingTeam}
Assessment Date: ${new Date().toLocaleDateString()}

OVERALL SCORE: ${score}/100
RECOMMENDATION: ${recommendation}

BUSINESS NEED:
${data.businessNeed}

CURRENT SOLUTION:
${data.currentSolution}

ASSESSMENT DETAILS:
- Urgency Level: ${data.urgency}
- Budget Range: ${data.budget}
- Expected Users: ${data.users}
- Risk Tolerance: ${data.riskTolerance}
- Alternatives Considered: ${data.alternatives.join(", ")}

IMPLEMENTATION PLAN:
${data.implementation}

NEXT STEPS:
${
  recommendation === "PROCEED"
    ? "✓ Move forward with procurement process\n✓ Engage with IT for technical review\n✓ Prepare business case for approval"
    : recommendation === "PROCEED WITH CAUTION"
      ? "⚠ Address identified concerns before proceeding\n⚠ Consider pilot program\n⚠ Seek additional stakeholder input"
      : "✗ Explore alternatives before investing\n✗ Reassess business need\n✗ Consider process improvements first"
}

Generated by Dentons Decision Support Portal
    `

    const blob = new Blob([report], { type: "text/plain" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `software-assessment-${data.softwareName.replace(/\s+/g, "-").toLowerCase()}.txt`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  if (!data) {
    return (
      <div className="min-h-screen bg-slate-50 flex items-center justify-center">
        <Card className="w-full max-w-md">
          <CardContent className="pt-6">
            <p className="text-center text-slate-600">Loading assessment results...</p>
          </CardContent>
        </Card>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-slate-50">
      <header className="border-b bg-white">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <Link href="/">
              <Button variant="ghost" size="sm">
                <ArrowLeft className="h-4 w-4 mr-2" />
                Back to Portal
              </Button>
            </Link>
            <Button onClick={generateReport} variant="outline">
              <Download className="h-4 w-4 mr-2" />
              Download Report
            </Button>
          </div>
        </div>
      </header>

      <div className="container mx-auto px-4 py-8">
        <div className="max-w-4xl mx-auto space-y-6">
          {/* Header */}
          <div className="text-center">
            <h1 className="text-3xl font-bold text-slate-900 mb-2">Assessment Results</h1>
            <p className="text-slate-600">Software Purchase Assessment for {data.softwareName}</p>
          </div>

          {/* Score Card */}
          <Card className="border-2">
            <CardHeader className="text-center">
              <CardTitle className="text-2xl">Overall Assessment Score</CardTitle>
              <div className={`text-6xl font-bold ${getScoreColor(score)}`}>{score}/100</div>
            </CardHeader>
            <CardContent className="text-center">
              <div className="flex items-center justify-center space-x-2 mb-4">
                {getRecommendationIcon(recommendation)}
                <Badge
                  variant={
                    recommendation === "PROCEED"
                      ? "default"
                      : recommendation === "PROCEED WITH CAUTION"
                        ? "secondary"
                        : "destructive"
                  }
                  className="text-lg px-4 py-2"
                >
                  {recommendation}
                </Badge>
              </div>
            </CardContent>
          </Card>

          {/* Detailed Analysis */}
          <div className="grid md:grid-cols-2 gap-6">
            <Card>
              <CardHeader>
                <CardTitle>Assessment Summary</CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <div>
                  <strong>Software:</strong> {data.softwareName}
                </div>
                <div>
                  <strong>Requesting Team:</strong> {data.requestingTeam}
                </div>
                <div>
                  <strong>Urgency:</strong>
                  <Badge variant="outline" className="ml-2">
                    {data.urgency}
                  </Badge>
                </div>
                <div>
                  <strong>Budget Range:</strong> {data.budget}
                </div>
                <div>
                  <strong>Expected Users:</strong> {data.users}
                </div>
                <div>
                  <strong>Alternatives Considered:</strong> {data.alternatives.length} options
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Key Recommendations</CardTitle>
              </CardHeader>
              <CardContent>
                {recommendation === "PROCEED" && (
                  <div className="space-y-2">
                    <div className="flex items-center space-x-2 text-green-700">
                      <CheckCircle className="h-4 w-4" />
                      <span>Move forward with procurement process</span>
                    </div>
                    <div className="flex items-center space-x-2 text-green-700">
                      <CheckCircle className="h-4 w-4" />
                      <span>Engage with IT for technical review</span>
                    </div>
                    <div className="flex items-center space-x-2 text-green-700">
                      <CheckCircle className="h-4 w-4" />
                      <span>Prepare business case for approval</span>
                    </div>
                  </div>
                )}

                {recommendation === "PROCEED WITH CAUTION" && (
                  <div className="space-y-2">
                    <div className="flex items-center space-x-2 text-yellow-700">
                      <AlertTriangle className="h-4 w-4" />
                      <span>Address identified concerns first</span>
                    </div>
                    <div className="flex items-center space-x-2 text-yellow-700">
                      <AlertTriangle className="h-4 w-4" />
                      <span>Consider a pilot program</span>
                    </div>
                    <div className="flex items-center space-x-2 text-yellow-700">
                      <AlertTriangle className="h-4 w-4" />
                      <span>Seek additional stakeholder input</span>
                    </div>
                  </div>
                )}

                {recommendation === "RECONSIDER" && (
                  <div className="space-y-2">
                    <div className="flex items-center space-x-2 text-red-700">
                      <XCircle className="h-4 w-4" />
                      <span>Explore alternatives before investing</span>
                    </div>
                    <div className="flex items-center space-x-2 text-red-700">
                      <XCircle className="h-4 w-4" />
                      <span>Reassess the business need</span>
                    </div>
                    <div className="flex items-center space-x-2 text-red-700">
                      <XCircle className="h-4 w-4" />
                      <span>Consider process improvements first</span>
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>

          {/* Business Need & Implementation */}
          <div className="grid md:grid-cols-2 gap-6">
            <Card>
              <CardHeader>
                <CardTitle>Business Need</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-slate-700">{data.businessNeed}</p>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Implementation Plan</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-slate-700">{data.implementation || "No implementation plan provided"}</p>
              </CardContent>
            </Card>
          </div>

          {/* Actions */}
          <div className="flex justify-center space-x-4">
            <Link href="/software-assessment">
              <Button variant="outline">Start New Assessment</Button>
            </Link>
            <Link href="/">
              <Button>Return to Portal</Button>
            </Link>
          </div>
        </div>
      </div>
    </div>
  )
}
